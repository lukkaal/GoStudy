your-module-name/
├── go.mod                     # 模块定义文件，声明模块路径、Go版本和依赖
├── go.sum                     # 依赖项的校验和文件，确保安全性和可复现性
|
├── cmd/                       # 存放可执行应用程序的 main 包
│   └── your-app-name/         # 你的应用程序的名称（例如：server, cli等）
│       └── main.go            # 应用程序的入口文件，只负责启动和初始化
|
├── pkg/                       # 存放对外公开的、可复用的库代码 (推荐)
│   ├── database/              # 数据库操作相关的包
│   │   ├── client.go          # 数据库客户端接口和实现
│   │   └── client_test.go     # 数据库客户端的测试文件
│   │
│   ├── httpclient/            # HTTP 客户端相关的包
│   │   └── client.go          # HTTP 请求发送和响应处理
│   │
│   └── util/                  # 存放通用辅助函数 (谨慎使用，建议拆分)
│       └── stringutil.go      # 字符串处理工具
|
├── internal/                  # 存放只供当前模块内部使用的代码 (强制限制外部导入)
│   ├── app/                   # 应用程序的核心业务逻辑
│   │   ├── service.go         # 业务服务接口和实现
│   │   └── errors.go          # 内部错误定义
│   │
│   └── config/                # 内部配置加载和解析
│       └── loader.go          # 配置文件加载器
|
├── api/                       # 存放 API 定义（如 protobuf, OpenAPI 规范）
│   └── v1/
│       └── service.proto      # gRPC 或其他 API 定义文件
|
├── configs/                   # 存放应用程序的配置文件
│   ├── development.yaml
│   └── production.yaml
|
├── scripts/                   # 存放辅助脚本，如构建、部署、测试脚本
│   ├── build.sh
│   └── deploy.sh
|
├── docs/                      # 存放项目文档
│   └── architecture.md
|
├── .gitignore                 # Git 忽略文件
├── README.md                  # 项目说明文件
└── LICENSE                    # 许可证文件

your-module-name/：整个 Go Module 的根目录，也是你 go.mod 中定义的模块路径。
go.mod 和 go.sum：Go Modules 的核心文件，管理依赖和版本。它们必须在模块的根目录下。
cmd/：
这个目录用于存放可执行的应用程序。
每个子目录（例如 your-app-name）代表一个独立的应用程序，其中包含一个 main.go 文件和它的 main 包。
职责：main 包应尽可能简单，只负责程序的启动、配置加载、依赖注入和错误处理。所有核心业务逻辑应委托给其他包。
pkg/：
这个目录通常用于存放可以被其他项目或模块复用的库代码。
如果你希望你的模块中的某些包能够被你的其他 Go 项目（或开源给社区）导入和使用，那么就放在这里。
职责：提供清晰、稳定的公共 API。
internal/：
这个目录用于存放只供当前模块内部使用的代码。
Go 工具链会强制执行一条规则：只有当前模块中的代码才能导入 internal 目录下的包。
职责：封装模块的内部实现细节，防止外部模块直接依赖于这些内部结构，从而实现更好的关注点分离和解耦。这是 Go 语言中实现私有化包的推荐方式。
api/：
如果你的模块提供 API（例如 REST API、gRPC 服务），这个目录可以存放相关的定义文件，如 protobuf 文件、OpenAPI (Swagger) 规范等。
configs/：
存放应用程序的配置文件，通常是 YAML, JSON 或 TOML 格式。
scripts/：
存放构建、测试、部署等自动化脚本。
docs/：
存放项目相关的文档、设计说明等。
.gitignore：
指定 Git 版本控制系统应该忽略的文件和目录。
README.md：
项目的入口文档，提供简介、安装和使用说明。
LICENSE：
指定项目的开源许可证。


2）
在 Go 语言中，一个 Go Module 可以包含多个 main 包，但一个 Go 程序只能有一个 main 函数作为执行入口。

为什么一个 Module 可以有多个 main 包？
这种情况通常发生在你的 Go Module 包含多个独立的可执行应用程序时。例如，你可能有一个项目，其中：

一个 Web 服务器：运行一个后端 API。
一个命令行工具 (CLI)：用于管理数据或执行维护任务。
一个消息队列消费者：处理异步任务。
每个应用程序都需要自己的 main 函数来启动。在 Go Module 中，你可以将这些独立的应用程序组织在不同的目录下，通常是在 cmd/ 目录下，每个子目录代表一个独立的 main 包。

my-multi-app-module/
├── go.mod
├── go.sum
|
├── cmd/
│   ├── web-server/              # 第一个应用程序：Web 服务器
│   │   └── main.go              # 包含 func main()
│   │
│   ├── cli-tool/                # 第二个应用程序：命令行工具
│   │   └── main.go              # 包含 func main()
│   │
│   └── worker/                  # 第三个应用程序：消息队列消费者
│       └── main.go              # 包含 func main()
|
└── pkg/                         # 可复用的库代码
    ├── user/
    └── product/

当你拥有多个 main 包时，你需要明确告诉 Go 工具链你要构建或运行哪一个应用程序。

构建 (Build)：
使用 go build 命令时，你需要指定包含 main 包的目录路径。

go build -o bin/web-server ./cmd/web-server

go run ./cmd/web-server

拥有多个 main 包是一种非常常见的 Go 项目组织方式，尤其适用于包含多个相关但又独立运行的服务的项目。它允许你在同一个 Go Module 下管理所有共享的库代码（通常放在 pkg/ 或 internal/），同时保持各个应用程序的独立性。