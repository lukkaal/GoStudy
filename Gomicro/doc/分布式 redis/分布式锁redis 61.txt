1)
| 模式                       | 行为说明                                    |
| ------------------------ | --------------------------------------- |
| 非阻塞模式（`isBlock = false`） | 如果锁被别人占用了，**立即失败**，比如返回 `false` 或 `nil` |
| 阻塞模式（`isBlock = true`）   | 如果锁被别人占用了，**等待一段时间（或一直等）直到锁释放**，再尝试获取   |

2) 连接池
配置 Redis 客户端如何管理连接的行为，即连接池的大小、
等待策略和空闲连接生命周期等，核心目的是优化性能、控制资源、提高稳定性。
->
redis.Pool 是“本地 Redis 客户端的连接池”
它的作用是：
在本地程序（你的应用进程）中维护多个 Redis TCP 连接的复用池，以减少频繁建立和关闭连接的开销。

你的程序（本地）：
 ┌────────────────────────────┐
 │      Redis Client Pool     │
 │ ┌─────┐  ┌─────┐  ┌─────┐  │
 │ │Conn1│  │Conn2│  │Conn3│ ...（最大 maxActive 个）  
 │ └─────┘  └─────┘  └─────┘  │
 └────────────────────────────┘
           ↓
       网络请求
           ↓
 Redis Server（远程）: localhost:6379

type ClientOptions struct {
	maxIdle            int
	idleTimeoutSeconds int
	maxActive          int
	wait               bool
	// 以下是连接 Redis 服务器的必填参数
	network  string // 网络类型，通常是 "tcp"
	address  string // Redis 服务器的地址和端口，例如 "localhost:6379" 或 "192.168.1.100:6379"
	password string // 连接 Redis 服务器所需的密码（如果 Redis 启用了认证）
}


3) 分布式锁
定义了一个可配置的“加锁策略”结构体，决定本地客户端如何加锁、是否等待、多久过期、是否自动续期。
type LockOptions struct {
	isBlock             bool  // 是否在获取锁失败时阻塞等待
	blockWaitingSeconds int64 // 阻塞模式下，最长等待时间（秒）
	expireSeconds       int64 // 锁的过期时间（秒），防止死锁
	watchDogMode        bool  // 是否启用看门狗模式，自动延长锁的有效期
}

| 问题                    | 对应字段                              |
| --------------------- | --------------------------------- |
| 锁被抢占，怎么办？             | `isBlock` + `blockWaitingSeconds` |
| 客户端挂了导致死锁怎么办？         | `expireSeconds`                   |
| 如果任务执行时间比锁时间长，锁会丢怎么办？ | `watchDogMode`                    |
