1）interface 的底层
eface：空接口类型 interface{} 的底层结构
type eface struct {
    _type *_type     // 指向类型信息的指针
    data  unsafe.Pointer // 指向数据的指针
}
_type：存储具体类型的元信息（类似于 RTTI）；
data：指向真正的数据内容的内存地址。
->var x interface{} = 100
其中：
_type 指向 int 的类型信息；
data 指向存储 100 的内存地址。

iface：非空接口（有方法）的底层结构
->比如 Plane 实现了 Bird 接口
type iface struct {
    tab  *itab          // 方法表指针
    data unsafe.Pointer // 指向实际值的指针
}
其中 itab 是
type itab struct {
	inter *interfacetype // 接口类型信息
	_type *_type          // 实际类型信息（Plane）
	fun   [N]*func        // 函数表（保存了 Plane.Fly 的函数指针）
}
| 字段名      | 说明                         |
| -------- | -------------------------- |
| `inter`  | 接口的类型描述信息（比如接口有几个方法、方法签名等） |
| `_type`  | 实际类型的元信息（比如 Plane 的类型描述）   |
| `fun[i]` | 实现该接口的实际方法地址（函数指针数组）       |


2）interface 的意义？
比如要进行读写，具体怎么读，读什么，网络IO还是文件IO取决于具体的实现。
这就形成了多样化的功能，从而实现多态。
->定义了一个IOInter的接口，只要别人实现了write和read方法，都可以转化为这个接口。
->比如golang的sort包实现的Sort源码：
func Sort(data Interface) {
	...
->
type Interface interface {
	// Len is the number of elements in the collection.
	Len() int
	// Less reports whether the element with
	// index i should sort before the element with index j.
	Less(i, j int) bool
	// Swap swaps the elements with indexes i and j.
	Swap(i, j int)
}
Interface是一个接口，内部声明了三个方法Len,Less,Swap。
比如->
func (hl HeroList) Len() int {
	return len(hl)
}
只要实现了这三个方法，就可以调用 Sort 对 HeroList 排序了。



2）interface万能接口
interface{}空接口可以接受任何类型的变量，从而可以实现类似于泛型编程的功能。
var ife interface{}
ife = herolists
val, ok := ife.(HeroList)
if !ok {
	...



3）interface实现万能类型双向链表
->嵌套 + 访问
type LinkList struct {
	Head *LinkEle
	Tail *LinkEle
}
type LinkEle struct {
	Data interface{}
	Pre  *LinkEle
	Next *LinkEle
}
func (le *LinkEle) GetData() interface{} {
	return le.Data
}
