
5）: 和 :=
| 语法     | 本质含义               | 适用场景                      | 是否声明变量 | 是否初始化值    | 特殊说明                 |
| ------ | ------------------ | ------------------------- | ------ | --------- | -------------------- |
| `:=`   | **声明并初始化**变量       | 函数内部，首次定义变量               | ? 是    | ? 是       | 自动类型推导               |
| `=`    | **赋值/重新绑定**已有变量    | 变量已声明过                    | ? 否    | ? 是       | 不能用于未声明变量            |
| `make` | **分配并初始化**引用类型底层结构 | 用于构造 `map`、`slice`、`chan` | ? 否    | ? 是（返回新值） | 通常配合 `:=` 或 `var =` 使用 |



6）slice 和 map
map：会根据存储的元素动态扩展底层数据结构。当元素增加时，map 会自动调整容量，以保证高效的查找、插入和删除操作。（哈希表）
slice：底层数组容量有限，当元素数量超过容量时，Go 会自动分配更大的内存空间并复制旧数据到新空间，实现动态扩展。（动态数组 std:vector）
->
map 的扩展：map 会根据负载因子和哈希冲突动态扩展，其扩展机制并不像 slice 那样是倍数增长的，它的扩展相对更复杂，并且涉及哈希表的重建。
slice 的扩展：slice 每次扩展通常是容量的两倍，这样做的好处是减少了扩展的次数，从而提高了性能。


7）function
func 函数名(函数参数)返回值类型{ }
golang 允许函数返回多个返回值
->
func Add(a int, b int) (ret int, err error) {
	if a < 0 || b < 0 {
		//不允许负数相加
		err = errors.New("should be non-negative numbers")
		return
	}
	return a + b, nil
}
nil 表示“空值”或“不存在”相当于 cpp 中的 nullptr

->
可变参数（可变数量，不是类型）
可变参数允许你向函数传入不定数量的参数，写法是在参数类型前加 ...（三个点）
func myfuncv(args ...int) {
	for _, arg := range args {
		fmt.Println(arg)
	}
}
使用 range 可以实现遍历

->特殊的可变参数
func myfunc(args ...interface{}) {
    for _, arg := range args { // 前一个参数代表索引，不需要的话可以用 _ 代替
        fmt.Println(arg)
	?fmt.PrintIn(arg.(type)) // .(type)：只能在 switch 语句中使用，用来检查一个接口值的动态类型。
    }
}
args ...interface{} 是 Go 中可变参数的一种特殊形式，用于接收任意类型的任意多个参数。
args 是一个空接口类型切片：[]interface{}