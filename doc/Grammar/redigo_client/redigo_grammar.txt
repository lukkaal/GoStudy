1）
| 函数 / 类型                    | 用途说明            |
| -------------------------- | --------------- |
| `redis.Dial`               | 建立连接            |
| `redis.DialConnectTimeout` | 设置连接超时时间        |
| `redis.DialReadTimeout`    | 设置读超时           |
| `redis.DialWriteTimeout`   | 设置写超时           |
| `redis.DialDatabase`       | 选择 Redis 数据库    |
| `redis.DialPassword`       | 设置密码认证          |
| `redis.String`             | 转换 `Do` 返回值为字符串 |
| `Conn.Do`                  | 执行 Redis 命令     |
| `Conn.Close`               | 关闭 Redis 连接     |
| `redis.DialOption`         | 连接选项类型          |

redis.Dial(network, address string, options ...DialOption) (Conn, error)
类型：Redigo 提供的连接选项类型，用于配置连接参数。
多个 DialOption 可以组合传入 Dial(...)。
conn, err := redis.Dial("tcp", redisAddr, opts...)
返回一个redis.conn的客户端连接

conn.Do(commandName string, args ...interface{}) (interface{}, error)
向 Redis 执行命令。
返回结果是 interface{} 类型。
conn.Do("PING")

redis.String(reply interface{}, err error) (string, error)
将 conn.Do 返回的 interface{} 类型转换为 string。
示例中用于处理 PING 返回值：
pong, err := redis.String(conn.Do("PING"))

conn.Close() error
关闭连接，释放资源。
通过 defer conn.Close() 保证退出前关闭。



2）连接池
在 Redis 中，连接池（Connection Pool） 是一种用于 复用 Redis 连接资源 的机制
避免频繁创建和销毁连接，提高性能、减少资源浪费
在高并发场景下：

如果每次操作 Redis 都 Dial() 建立一个新连接，开销很大；
建立和断开连接涉及 TCP 三次握手、资源清理；
Redis 是单线程模型，连接过多也可能造成压力。

连接池的核心优势：
在使用 Redis 时：
每次调用 redis.Dial() 都会触发一次新的 TCP 连接建立过程，这意味着系统要：
创建一个新的 文件描述符（fd）
分配内存、网络缓冲区等资源
执行三次握手（如果是 TCP
如果你频繁地建立和关闭连接，会有显著的系统资源开销。

连接池（redis.Pool）的好处：
连接一旦建立好，就会复用这个连接。
下一次 Redis 操作时直接从池中拿出已有的连接即可，无需重新建立 TCP 连接 / 分配 fd。
避免 fd 泄漏和系统资源耗尽。

连接池的有限资源
| 参数          | 含义                    |
| ----------- | --------------------- |
| `MaxIdle`   | 池中最多保留多少个空闲连接（未被使用）   |
| `MaxActive` | 总共最多允许多少个连接同时活跃（即被使用） |
当连接池“满”时的表现：
如果连接数达到了 MaxActive 限制，并且都正在被使用，那么后续调用 pool.Get() 会：
阻塞等待（直到某个连接归还）
或者返回错误（具体行为取决于 Redigo 的版本及配置）


3）空闲连接
做好区分->针对客户端和服务端概念不同
空闲连接（idle connection）指的是：
➤ 已经建立了 TCP 连接，但当前没有被任何 goroutine 使用，
➤ 并且连接处于 等待被复用 的状态。
| 术语           | 类型   | 说明                                |
| ------------ | ---- | --------------------------------- |
| 空闲连接         | 状态   | 池中未被占用的已连接对象                      |
| TestOnBorrow | 函数hook | 用于验证从连接池取出连接是否仍然健康，尤其是**空闲太久的连接** |

[连接池 Pool]
      ↓
 Get() 触发
      ↓
是否空闲连接？——→ 是 ——→ 检查是否设置了 TestOnBorrow？——→ 是 ——→ 执行 Ping 检查
      ↓                                               ↓
     否                                          出错？→ 是 → 销毁连接 → 新建连接
      ↓                                               ↓
  新建连接                                     否 → 返回该连接使用



4）
用 error 表示可预期的错误，调用者可以处理和恢复。
用 panic 表示程序遇到无法恢复的严重错误，除非有 recover，否则程序会终止。
| 方面     | `err`                   | `panic`                    |
| ------ | ----------------------- | -------------------------- |
| 类型     | 普通值（`error`接口类型）        | 内置运行时异常                    |
| 用途     | 表示预期或可恢复的错误             | 表示不可恢复或严重错误                |
| 处理方式   | 通过条件判断处理或返回             | 通过 `recover` 捕获或导致程序终止     |
| 影响程序流程 | 错误出现时可选择继续或退出           | 会立即中断当前函数，逐层向上传播           |
| 触发方式   | 由代码显示返回错误               | 由代码调用 `panic()` 或运行时异常触发   |
| 推荐用场景  | 普通错误检查，如参数验证、I/O失败      | 程序内部严重错误或不可恢复状态            |
| 示例     | `if err != nil { ... }` | `panic("something wrong")` |


