1）defer
暂时不关资源直到函数快结束的时候自动关掉
srcF, err := os.Open(src)
if err != nil{
    return 
}
defer srcF.Close()

| 功能           | 解释                            |
| ------------ | ----------------------------- |
| **资源释放**     | 自动关闭文件、数据库连接、网络连接等            |
| **panic 恢复** | 配合 `recover()` 实现 panic 后的恢复  |
| **自动解锁**     | `mutex.Unlock()` 等同步操作防止忘记释放锁 |
| **逻辑清晰**     | 资源释放代码就写在获取资源的地方，避免忘记或出错      |



2）栈式调用和资源捕获
Go 的 defer 是栈式调用机制（LIFO），函数 defer 的顺序越靠后，执行时越靠前
这有助于资源释放、清理、恢复等行为的可控性和安全性。
在执行匿名函数的时候，defer 下的 立即执行会实时解析和捕获值
接下来对值的修改不影响原有函数捕获值（snapshot的感觉）
但如果不声明的话，defer是无参函数，内部引用了外部变量，则会记录引用，
会使用最后修改的值传入为参数



3）链式调用
defer 只能执行一个函数，defer是栈式调用，后入先出规则。
当defer执行链式操作时，前边的表达式都会优先求值，只有最后一个表达式入栈延迟执行。



4）匿名函数
函数对象：
func log(m int) (value int, ... ){
    log.Println(m)
}
结构体方法：
func (val *Mystruct) log(m int) (value int, ... ){
    log.Println(m)
}

匿名函数：
f := func(m int) {
    log.Println(m)
}
f()

立即执行函数表达式：
func(m int) {
    log.Println(m)
}(i)

关于内存分区：
匿名函数本质上也是函数对象，会在编译时被单独编译成函数实体，存放在代码段（text segment）中，就像普通的具名函数一样。
匿名函数是否嵌套定义，并不会影响它最终生成的代码位置 —— 它仍是一个独立的函数体。