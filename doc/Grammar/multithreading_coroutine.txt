1）单核
| 项目   | 线程（Thread）      | 协程（Coroutine）  |
| ---- | --------------- | -------------- |
| 调度方式 | 操作系统内核调度（抢占式）   | 用户态调度（协作式）     |
| 切换成本 | 高（涉及内核 + 上下文切换） | 低（用户态保存/恢复寄存器） |
| 并发单位 | 粗粒度             | 细粒度            |
->线程：
特点：
单核 CPU 每次只能执行一个线程。
操作系统通过 时间片轮转 + 抢占式调度，在多个线程之间快速切换。
每次切换涉及 内核态上下文切换，包括寄存器、栈、内存映射等。

效果（并发）：从宏观上看多个线程“并发执行”。
实际上是串行 + 快速切换，存在上下文切换开销。

->协程
特点：
协程在用户态调度，没有系统调度干预。
需要程序员在合适位置 显式让出控制权（yield/await）。
切换仅涉及少量寄存器、栈指针，极快，切换时间 <1μs。

效果（并发）：
同样是一个时间段内多个任务“在进行”，但调度效率远高于线程。
若协程调度合理，几乎看不到任何上下文切换带来的性能损耗。

** 在 单核 CPU 上，协程通过更低开销的用户态调度，实现更高效的并发；
而线程虽然也能并发，但受制于高开销和频繁切换，效率较低。**


2）多核
->
每个线程可以由操作系统调度到不同核心并行执行。
属于内核态资源，线程之间可以真正并行运行（多个核心同时跑多个线程）。
切换代价中等（线程上下文 + 栈切换，进入内核态）。

在多核 CPU 上：
系统调度器负责把多个线程分发到多个核心。
可以实现并发 + 真正并行。


->
协程本质是用户态的轻量线程，不由内核调度。
调度、切换都在用户空间完成，代价极低。
单个线程内可以跑成千上万的协程，但它们本身 不能并行，只能并发。

在多核 CPU 上：
协程本身不能并行，需要依托多个线程（运行在多个核心）才能达到并行 + 并发效果。
像 Go 会自动把大量 goroutine 映射到多个 OS 线程，再由 OS 调度器分配到多个 CPU 核心。

Go 会开启多个线程（GOMAXPROCS），并在这些线程上调度大量 goroutine。
| 特性    | 线程               | 协程（+线程）              |
| ----- | ---------------- | -------------------- |
| 是否可并行 | ✅ 是，多个核心同时执行多个线程 | ⚠️ 本身不行，需依赖多线程实现并行   |
| 调度方式  | 内核态，OS 调度        | 用户态，程序/框架调度          |
| 切换成本  | 中等（线程上下文）        | 极低（寄存器/栈指针）          |
| 数量级   | 中（几百～几千）         | 高（几万～百万级）            |
| 性能瓶颈  | 切换频繁、资源消耗大       | 调度效率高，但不能自动并行        |
| 适合场景  | CPU 密集型，适合并行任务   | I/O 密集型，协程 + 多线程效率最佳 |



3）关于切换线程时候的协程在做什么
协程一般绑定到线程吗？
大多数协程实现都是“线程绑定”协程，即协程只能在创建它的线程里运行。
这种设计简化了上下文切换和状态管理，不需要跨线程同步协程状态。
->Go：虽然 goroutine 可以被调度到多个线程，但调度器负责透明调度，程序员感觉不到迁移细节。

线程切换会发生吗？
多核 CPU 上线程切换肯定会发生，因为：
操作系统调度器会基于时间片、优先级等策略，随时切换线程执行权。
即使线程被分配到某个核心，也可能被抢占切换到别的线程。
线程切换涉及内核态的上下文切换，开销较大。

线程上的协程如何处理？
协程是用户态调度，完全在单个线程内执行和切换。
线程被切换出去时，该线程内的协程会被整体“暂停”（因为线程挂起了）。
当线程被重新调度回 CPU，该线程内的协程状态依然保持，继续从上次切换点运行。
多线程上的协程相互独立，每个线程维护自己的一套协程调度。

| 时间线     | 线程切换层（内核态）              | 线程内协程调度层（用户态）     |
| ------- | ----------------------- | ----------------- |
| 线程A运行   | 线程A在核0运行，调度协程a1, a2, a3 | 线程A内的协程按程序逻辑切换    |
| 线程被抢占切换 | OS切换到线程B，线程A挂起          | 线程A内所有协程暂停，等待线程恢复 |
| 线程B运行   | 线程B在核1运行，调度协程b1, b2     | 线程B内协程独立调度        |
| 线程A恢复运行 | 线程A重新分配核0，恢复执行线程内协程     | 线程A内协程恢复继续执行      |


但是！
Go 语言的调度器是例外：
Go runtime 实现了 M（线程）与 G（goroutine）模型，G 可在多个 M 之间动态迁移。
当线程被挂起或负载不均时，goroutine 可以被迁移到其他线程继续执行。
这种迁移对程序员透明，提升了调度灵活性和多核利用率。
但是这些线程必须满足：
Go 语言中，goroutine 由 Go runtime 调度器管理，只有 Go runtime 启动并管理的线程（M）才会运行 goroutine。
某些协程库会将协程和线程“一一绑定”或“线程局部存储（TLS）”协程上下文，只有特定线程能调度对应的协程。

也绝对不会跨进程，进而导致错误

线程切换涉及页表切换+内核调度，协程只在用户空间修改栈指针 + PC。
协程开销小的关键是：它只申请少量内存做栈和状态，切换又只在用户空间完成，不打扰操作系统。




4）各自在内存中的位置：
线程栈是由操作系统分配、位于内核管理的内存区域；而协程栈是用户程序自行管理、位于用户空间的“虚拟栈”。
| 对比项        | 线程栈                  | 协程栈（用户态栈）                 |
| ---------- | -------------------- | ------------------------- |
| **内存位置**   | 由 OS 分配，存在于内核态/用户态之间 | 在用户空间内存（堆）中，程序手动管理        |
| **分配方式**   | 一般每线程固定分配（如 1MB）     | 小块（如 2KB\~64KB），手动分配或动态增长 |
| **作用对象**   | 当前线程的函数调用、局部变量等      | 当前协程的函数调用、局部变量等           |
| **栈帧建立位置** | 在线程栈空间内              | 在协程自己的“用户态虚拟栈”中           |
| **调度控制权**  | 由操作系统调度              | 由用户代码调度（yield/resume）     |


->只在该协程被调度时将其“栈帧”加载到 CPU 的栈指针寄存器（如 rsp/esp）中：
将该线程的栈指针（SP）暂时指向协程自己的用户态栈；
执行完后再将 SP 恢复回原线程栈（继续其他任务）；
所以虽然“跑在同一个线程”，但各用各的栈。


